<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.ssm.shoppingstreet.controller" />
	<!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
	<mvc:annotation-driven />
	<!-- 静态资源处理 css js imgs -->
	<mvc:resources location="/WEB-INF/css/" mapping="/css/**" />
	<mvc:resources location="/WEB-INF/js/" mapping="/js/**" />
	<mvc:resources location="/WEB-INF/images/" mapping="/images/**" />
	<!-- 避免IE执行AJAX时，返回JSON出现下载文件 <bean id="mappingJacksonHttpMessageConverter" 
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		</list> </property> </bean> -->
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="mappingJacksonHttpMessageConverter" 
		/> JSON转换器 </list> </property> </bean> -->

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		默认编码 <property name="defaultEncoding" value="utf-8" /> 文件大小最大值 <property 
		name="maxUploadSize" value="10485760000" /> 内存中的最大值 <property name="maxInMemorySize" 
		value="40960" /> 启用是为了推迟文件解析，以便捕获文件大小异常 <property name="resolveLazily" value="true" 
		/> </bean> -->

	<!-- 配置ViewResolver 。可用多个ViewResolver 。使用order属性排序。 InternalResourceViewResolver 
		放在最后 -->
	<!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> 
		<property name="order" value="1"></property> <property name="mediaTypes"> 
		<map> 告诉视图解析器，返回的类型为json格式 <entry key="json" value="application/json" /> 
		<entry key="xml" value="application/xml" /> <entry key="htm" value="text/htm" 
		/> </map> </property> <property name="defaultViews"> <list> ModelAndView里的数据变成JSON 
		<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" 
		/> </list> </property> <property name="ignoreAcceptHeader" value="true"></property> 
		</bean> -->
	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 拦截url是"/member**"的mvc控制器（所有会员管理页需要先登录） -->
			<mvc:mapping path="/member**" />
			<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在 LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) 
				<mvc:exclude-mapping path="/system/login" /> -->
			<bean class="com.ssm.shoppingstreet.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 使用拦截器实现自动登录功能 -->
			<mvc:mapping path="/**" />
			<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在 LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) 
				<mvc:exclude-mapping path="/system/login" /> -->
			<bean class="com.ssm.shoppingstreet.interceptor.AutoLoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>  